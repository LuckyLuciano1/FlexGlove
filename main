#include <Servo.h>

//////////////////////////////////STRUCT AND VARIABLE DEFINITIONS////////////////////////////////////////////////
struct sensor{//creating a struct to manage all six sensors
   int port;//port of corresponding sensor
   long int value, minvalue, maxvalue;//degree to which sensor is flexed, and range of numbers that each flex sensor bends to; roughly 600-900. adjusted in code later
};

struct servo{ 
  int port;//port of corresponding motor
  long int value;//position of motor
  Servo objservo;//storing the object 'servo'. this works with 'move' and 'attach' commands to command the actual motor
};

//NOTE: both Arrays should only require 4 ports, but for some goddamn reason that doesn't work. doing so causes minvalue/maxvalue to kill the program through their very existence.
sensor SensorArray[5];//creating vector to store sensor structs
servo ServoArray [5];//creating vector to store motor structs info
int pairnumber =  5;//number of paired servos/sensors

//////////////////////////////////PROGRAM BEGIN////////////////////////////////////////////////
void setup() {
 Serial.begin(9600);//sets up console window

for(int x  = 0; x <= (pairnumber-1); x++){//defining all six structs within the vector, and initializing values
  SensorArray[x] = {x, 0, 1000, 0};//600-900 is the rough range of the sensors. range is adjusted over time within the program. The range is reversed to allow for the actual min/max to be established correctly
  //ServoArray[x] = {(x+2), 0};//'+2' shifts ports to correct value (servo ports go from 3-7 rather than 0-4 in the case of the flex sensors)
  //ServoArray[x].objservo.attach(ServoArray[x].port);//a bit redundant (port is both stored in the struct, and used immediately- but I figure port number might be good info to have for later,m and it will make the struct more comprehensive)
}
}

void loop() {

for(int x  = 0; x <= (pairnumber-1); x++){//this for loop runs through each servo and sensor pair (1-5, or 0-6)

//////////////////////////////////UPDATING VARIABLES AND MOVING MOTORS////////////////////////////////////////////////
SensorArray[x].value = analogRead(SensorArray[x].port);//updating 'flex' magnitude to current values

if(SensorArray[x].value > SensorArray[x].maxvalue) {SensorArray[x].maxvalue = SensorArray[x].value;}//adjusting range of numbers that each flex sensor has.Here, if a number exceeds the range, it becomes the new maximum
if(SensorArray[x].value < SensorArray[x].minvalue) {SensorArray[x].minvalue = SensorArray[x].value;}//here, if a number is below the minimum, it becomes the new minimum.

//min/maxvalue is the flex sensor reading, servo's range is 0-180
ServoArray[x].value = map(SensorArray[x].value, SensorArray[x].minvalue, SensorArray[x].maxvalue, 0, 180);//map() function reduces range of 0-1023 (0 to 5 volts) to 600-900
ServoArray[x].value = constrain(ServoArray[x].value, 0, 180);//constrain() 'clips' numbers into a specifid range (if above/below range, makes that number max/min of range. if within range, no change)

ServoArray[x].objservo.write(ServoArray[x].value);//move motor to position identified via map()/constrain()/analogRead()

/*Serial.print("sensor_min_");
Serial.print(x);
Serial.print(": ");
Serial.print(SensorArray[x].minvalue);
Serial.print("sensor_max_");
Serial.print(x);
Serial.print(": ");
Serial.print(SensorArray[x].maxvalue);
*/
}//end of for loop
Serial.println(".");//puts all console commands on one line, moves to next line for new loop
delay(20);//delays code to make data more comprehensible
}//end of 'loop' section
